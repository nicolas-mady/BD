-- SELECT *
-- FROM reviews
-- WHERE pasin = '0195110382'
-- ORDER BY rating DESC, helpful DESC
-- LIMIT 5;
-- SELECT *
-- FROM reviews
-- WHERE pasin = '0195110382'
-- ORDER BY rating, helpful DESC
-- LIMIT 5;
-- ---------------------------------------------------------------------------
-- SELECT p2.pasin, p2.title, p2.srank
-- FROM products p1
-- NATURAL JOIN similars s
-- JOIN products p2 ON s.sim = p2.pasin
-- WHERE s.pasin = '0001053736' AND p1.srank > p2.srank;
-- ---------------------------------------------------------------------------
-- SELECT rdate, ROUND(AVG(rating), 2) AS avg_rating, COUNT(*) AS num_reviews
-- FROM reviews
-- WHERE pasin = '0807220280'
-- GROUP BY rdate;
-- ---------------------------------------------------------------------------
-- WITH date_range AS ( -- datas de início e fim do produto
--     SELECT
--         MIN(rdate) AS start_date,
--         MAX(rdate) AS end_date
--     FROM reviews
--     WHERE pasin = '0807220280'
-- ),
-- all_dates AS ( -- gera todas as datas no intervalo
--     SELECT generate_series(
--                (SELECT start_date FROM date_range),
--                (SELECT end_date FROM date_range),
--                interval '1 day'
--            )::date AS rdate
-- ),
-- prod_dates AS ( -- média diária real (somente dias com review)
--     SELECT rdate,
--            ROUND(AVG(rating), 2) AS avg_rating,
--            COUNT(*) AS num_reviews
--     FROM reviews
--     WHERE pasin = '0807220280'
--     GROUP BY rdate
-- )
-- SELECT -- preenche valores faltantes com zero
--     rdate,
--     COALESCE(avg_rating, 0) AS avg_rating,
--     COALESCE(num_reviews, 0) AS num_reviews
-- FROM all_dates
-- NATURAL LEFT JOIN prod_dates
-- ORDER BY rdate;
-- ---------------------------------------------------------------------------
-- SELECT *
-- FROM (
--     SELECT
--         *,
--         ROW_NUMBER() OVER (
--             PARTITION BY grp
--             ORDER BY srank
--         ) AS rn
--      FROM products
--      WHERE
--         srank IS NOT NULL
--         AND srank > 0
-- )
-- WHERE rn <= 10;
-- ############################################################################
/*
5. Listar os 10 produtos
com a maior média de avaliações úteis positivas por produto.
 */
-- SELECT p.pasin,
--        p.title,
--        p.grp,
--        AVG(r.rating) AS avg_rating,
--        AVG(CAST(r.helpful AS FLOAT) / NULLIF(r.votes, 0)) AS avg_helpful_ratio,
--        COUNT(r.pasin) AS total_reviews,
--        COUNT(CASE
--                  WHEN r.rating >= 4 THEN 1
--              END) AS positive_reviews
-- FROM products p
-- JOIN reviews r ON p.pasin = r.pasin
-- WHERE
--     r.votes > 0
--     AND r.rating >= 4
-- GROUP BY p.pasin, p.title, p.grp
-- HAVING COUNT(r.pasin) >= 3 -- Pelo menos 3 reviews para ser considerado
-- ORDER BY
--     AVG(CAST(r.helpful AS FLOAT) / NULLIF(r.votes, 0)) DESC,
--     AVG(r.rating) DESC
-- LIMIT 10;
-- ############################################################################
/*
6. Listar as 5 categorias
com a maior média de avaliações úteis positivas por produto.
 */
-- WITH avg_per_product AS (
--     SELECT p.pasin,
--            AVG(r.helpful) AS avg_helpful
--     FROM products p
--     JOIN reviews r ON p.pasin = r.pasin
--     GROUP BY p.pasin
-- ),
-- avg_per_category AS (
--     SELECT c.cid,
--            c.descr,
--            AVG(ap.avg_helpful) AS avg_helpful_per_product
--     FROM avg_per_product ap
--     JOIN products_categories pc ON ap.pasin = pc.pasin
--     JOIN categories c ON pc.cid = c.cid
--     GROUP BY c.cid, c.descr
-- )
-- SELECT cid, descr, avg_helpful_per_product
-- FROM avg_per_category
-- ORDER BY avg_helpful_per_product DESC
-- LIMIT 5;
-- ----------------------------------------------------------------------------
-- SELECT cid, descr
-- FROM categories
-- NATURAL JOIN products_categories
-- NATURAL JOIN reviews
-- WHERE votes > 0 AND rating > 3
-- GROUP BY cid, descr
-- ORDER BY AVG(CAST(helpful AS FLOAT) / votes) DESC, AVG(rating) DESC
-- LIMIT 5;
--- ---------------------------------------------------------------------------
/* 7. Listar os 10 clientes que mais fizeram comentários por grupo de produto.
 */
-- SELECT *
-- FROM (
--     SELECT
--         usr_id,
--         grp,
--         row_number() OVER (PARTITION BY grp ORDER BY COUNT(*) DESC) AS rnk,
--         COUNT(*) AS num_reviews
--     FROM reviews
--     NATURAL JOIN products
--     GROUP BY usr_id, grp
-- )
-- WHERE rnk <= 10;


-- SELECT *
-- FROM (
--     SELECT MIN(rdate) AS start_date,
--            MAX(rdate) AS end_date
--     FROM reviews
-- ) AS date_range;